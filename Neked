-- by Neked

repeat task.wait() until game:IsLoaded()

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local TeleportService = game:GetService("TeleportService")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer

local Window = Rayfield:CreateWindow({
Name = "GEF Script",
LoadingTitle = "GEF Custom Menu",
LoadingSubtitle = "by Neked"
})

--========================[ UTILS ]========================
local function getPartFromInstance(inst)
if not inst or not inst.Parent then return nil end
if inst:IsA("BasePart") then return inst end
if inst:IsA("Model") then
if inst.PrimaryPart then return inst.PrimaryPart end
local p = inst:FindFirstChildWhichIsA("BasePart", true)
if p then return p end
end
return nil
end

local function makeHighlight(target, color, nameTag)
if not target or not target.Parent then return nil end
local tag = nameTag or "__NK_HL"
if target:FindFirstChild(tag) then return target[tag] end
local hl = Instance.new("Highlight")
hl.Name = tag
hl.Adornee = target
hl.FillColor = color
hl.OutlineColor = Color3.new(0,0,0)
hl.FillTransparency = 0.5
hl.OutlineTransparency = 0
hl.Parent = target
return hl
end

local function makeBillboard(target, text, color, nameTag)
if not target or not target.Parent then return nil end
local part = getPartFromInstance(target)
if not part then return nil end
local tag = nameTag or "__NK_BB"

local holder = part:FindFirstChild(tag)  
if not holder then  
    holder = Instance.new("BillboardGui")  
    holder.Name = tag  
    holder.ResetOnSpawn = false  
    holder.AlwaysOnTop = true  
    holder.Size = UDim2.new(0, 200, 0, 50)  
    holder.ExtentsOffsetWorldSpace = Vector3.new(0, 3, 0)  
    holder.MaxDistance = 1e7  
    holder.Parent = part  
end  

local label = holder:FindFirstChild("T")  
if not label then  
    label = Instance.new("TextLabel")  
    label.Name = "T"  
    label.Size = UDim2.new(1, 0, 1, 0)  
    label.BackgroundTransparency = 1  
    label.TextScaled = true  
    label.Font = Enum.Font.GothamBold  
    label.Parent = holder  
end  
label.Text = tostring(text)  
label.TextColor3 = color  

return holder

end

local function clearByTagInInstance(inst, tag)
if not inst then return end
for _,v in ipairs(inst:GetDescendants()) do
if v.Name == tag then pcall(function() v:Destroy() end) end
end
end

local function clearTagsUnder(parent, tags)
if not parent then return end
for _,obj in ipairs(parent:GetDescendants()) do
for _,t in ipairs(tags) do
if obj.Name == t then pcall(function() obj:Destroy() end) end
end
end
end

--========================[ PLAYER TAB ]========================
local Tab1 = Window:CreateTab("Player")

local infJump = false
Tab1:CreateToggle({
Name = "Inf Jump",
CurrentValue = false,
Callback = function(v) infJump = v end,
})
UIS.JumpRequest:Connect(function()
if infJump and LocalPlayer.Character then
local hum = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
if hum then hum:ChangeState(Enum.HumanoidStateType.Jumping) end
end
end)

local fullBright = false
Tab1:CreateToggle({
Name = "FullBright",
CurrentValue = false,
Callback = function(Value)
fullBright = Value
if Value then
task.spawn(function()
while fullBright do
pcall(function()
Lighting.Brightness = 2
Lighting.ClockTime = 12
Lighting.FogEnd = 1e10
Lighting.GlobalShadows = false
Lighting.OutdoorAmbient = Color3.fromRGB(128,128,128)
end)
task.wait(0.01)
end
end)
end
end,
})

Tab1:CreateSlider({
Name = "JumpPower",
Range = {1,150},
Increment = 1,
CurrentValue = 50,
Callback = function(val)
local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
if hum then
hum.UseJumpPower = true
hum.JumpPower = val
end
end,
})

Tab1:CreateButton({
Name = "Выдать TP Tool",
Callback = function()
local tool = Instance.new("Tool")
tool.RequiresHandle = false
tool.Name = "TP Tool"
tool.Activated:Connect(function()
local m = LocalPlayer:GetMouse()
local char = LocalPlayer.Character
local hrp = char and char:FindFirstChild("HumanoidRootPart")
if m and m.Hit and hrp then
hrp.CFrame = CFrame.new(m.Hit.Position + Vector3.new(0,3,0))
end
end)
tool.Parent = LocalPlayer.Backpack
end,
})

Tab1:CreateButton({
Name = "GodMode",
Callback = function()
task.spawn(function()
while true do
task.wait(0.001)
local gefs = Workspace:FindFirstChild("GEFs")
if gefs then pcall(function() gefs:Destroy() end) end
for _, obj in ipairs(Workspace:GetChildren()) do
if obj.Name == "GEF" then pcall(function() obj:Destroy() end) end
end
end
end)
Rayfield:Notify({Title="GodMode", Content="Чтоб отключить надо перезайти", Duration=4})
end,
})

Tab1:CreateButton({
Name = "ReJoin",
Callback = function()
TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
end,
})

--========================[ ITEMS TAB ]========================
local Tab2 = Window:CreateTab("Items")
local itemsList = {"Bat","Crowbar","Food","Hammer","Handgun","Lantern","Medkit","Money","Shells","Soda","Bullets","GPS","Shotgun"}

for _, itemName in ipairs(itemsList) do
Tab2:CreateButton({
Name = "TP Random " .. itemName,
Callback = function()
local pickups = Workspace:FindFirstChild("Pickups")
if pickups then
local candidates = {}
for _, v in ipairs(pickups:GetChildren()) do
if v.Name == itemName then table.insert(candidates, v) end
end
if #candidates > 0 then
local target = candidates[math.random(1,#candidates)]
local pos
if target:IsA("BasePart") then pos = target.Position
else
local p = getPartFromInstance(target)
if p then pos = p.Position end
end
local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
if pos and hrp then hrp.CFrame = CFrame.new(pos + Vector3.new(0,3,0)) end
else
Rayfield:Notify({Title="Ошибка", Content="На карте нету "..itemName, Duration=3})
end
end
end,
})
end

--========================[ MONEY TAB ]========================
local Tab3 = Window:CreateTab("Money")
local autoFarm = false

Tab3:CreateToggle({
Name = "Auto Farm Money",
CurrentValue = false,
Callback = function(Value)
autoFarm = Value
if Value then
task.spawn(function()
while autoFarm do
local pickups = Workspace:FindFirstChild("Pickups")
local list = {}
if pickups then
for _,v in ipairs(pickups:GetChildren()) do
if v.Name == "Money" then table.insert(list, v) end
end
end
if #list > 0 then
local target = list[math.random(1,#list)]
local pos
if target:IsA("BasePart") then pos = target.Position
else
local p = getPartFromInstance(target)
if p then pos = p.Position end
end
local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
if pos and hrp then
hrp.CFrame = CFrame.new(pos + Vector3.new(0,3,0))
for _,prompt in ipairs(target:GetDescendants()) do
if prompt:IsA("ProximityPrompt") then
task.spawn(function()
while autoFarm and prompt.Parent do
pcall(function() fireproximityprompt(prompt, 1) end)
task.wait(0.0001)
end
end)
end
end
end
else
Rayfield:Notify({Title="Предупреждение", Content="Если не телепортируется, то на локации нету денег", Duration=3})
end
task.wait(0.0001)
end
end)
end
end,
})

Tab3:CreateButton({
Name = "TP To Random Money",
Callback = function()
local pickups = Workspace:FindFirstChild("Pickups")
if not pickups then
Rayfield:Notify({Title="Ошибка", Content="Папка Pickups не найдена", Duration=3})
return
end
local list = {}
for _,v in ipairs(pickups:GetChildren()) do
if v.Name == "Money" then table.insert(list, v) end
end
if #list == 0 then
Rayfield:Notify({Title="Ошибка", Content="На карте нету Money", Duration=3})
return
end
local target = list[math.random(1,#list)]
local pos
if target:IsA("BasePart") then pos = target.Position
else
local p = getPartFromInstance(target)
if p then pos = p.Position end
end
local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
if pos and hrp then hrp.CFrame = CFrame.new(pos + Vector3.new(0,3,0)) end
end,
})

--========================[ TRACKER TAB ]========================
local Tab4 = Window:CreateTab("Tracker")

local trackFilter = {}
for _,name in ipairs(itemsList) do trackFilter[name] = false end

for _,name in ipairs(itemsList) do
Tab4:CreateToggle({
Name = "Track "..name,
CurrentValue = false,
Callback = function(v)
trackFilter[name] = v
end
})
end

local TRK_TAG_HL = "__NK_TRK_HL"
local TRK_TAG_BB = "__NK_TRK_BB"

task.spawn(function()
while true do
local pickups = Workspace:FindFirstChild("Pickups")
if pickups then
for _,obj in ipairs(pickups:GetChildren()) do
local want = trackFilter[obj.Name] == true
local has = obj:FindFirstChild(TRK_TAG_HL) ~= nil
if want and not has then
makeHighlight(obj, Color3.new(1,1,0), TRK_TAG_HL)
makeBillboard(obj, obj.Name, Color3.new(1,1,0), TRK_TAG_BB)
elseif (not want) and has then
clearByTagInInstance(obj, TRK_TAG_HL)
local p = getPartFromInstance(obj)
if p then clearByTagInInstance(p, TRK_TAG_BB) end
end
end
end
task.wait(0.25)
end
end)

Tab4:CreateButton({
Name = "UnTrack All",
Callback = function()
for k,_ in pairs(trackFilter) do trackFilter[k] = false end
local pickups = Workspace:FindFirstChild("Pickups")
if pickups then
for _,obj in ipairs(pickups:GetChildren()) do
clearByTagInInstance(obj, TRK_TAG_HL)
local p = getPartFromInstance(obj)
if p then clearByTagInInstance(p, TRK_TAG_BB) end
end
end
end
})

--========================[ ESP TAB ]========================
local Tab5 = Window:CreateTab("ESP")

local espPlayersOn = false
local espItemsOn   = false
local espGEFsOn    = false

local PLR_TAG_HL = "__NK_PLR_HL"
local PLR_TAG_BB = "__NK_PLR_BB"
local ITM_TAG_HL = "__NK_ITM_HL"
local ITM_TAG_BB = "__NK_ITM_BB"
local GEF_TAG_HL = "__NK_GEF_HL"
local GEF_TAG_BB = "__NK_GEF_BB"

local function cleanupPlayersESP()
for _,plr in ipairs(Players:GetPlayers()) do
if plr.Character then
clearByTagInInstance(plr.Character, PLR_TAG_HL)
clearByTagInInstance(plr.Character, PLR_TAG_BB)
end
end
end
local function cleanupItemsESP()
local p = Workspace:FindFirstChild("Pickups")
if p then
for _,v in ipairs(p:GetChildren()) do
clearByTagInInstance(v, ITM_TAG_HL)
local part = getPartFromInstance(v)
if part then clearByTagInInstance(part, ITM_TAG_BB) end
end
end
end
local function cleanupGEFESP()
local g = Workspace:FindFirstChild("GEFs")
if g then
for _,v in ipairs(g:GetChildren()) do
clearByTagInInstance(v, GEF_TAG_HL)
local part = getPartFromInstance(v)
if part then clearByTagInInstance(part, GEF_TAG_BB) end
end
end
for _,obj in ipairs(Workspace:GetChildren()) do
if obj.Name == "GEF" then
clearByTagInInstance(obj, GEF_TAG_HL)
local part = getPartFromInstance(obj)
if part then clearByTagInInstance(part, GEF_TAG_BB) end
end
end
end

task.spawn(function()
while true do
if espPlayersOn then
for _,plr in ipairs(Players:GetPlayers()) do
if plr ~= LocalPlayer and plr.Character then
makeHighlight(plr.Character, Color3.new(0,1,0), PLR_TAG_HL)
makeBillboard(plr.Character, plr.Name, Color3.new(0,1,0), PLR_TAG_BB)
end
end
end
if espItemsOn then
local p = Workspace:FindFirstChild("Pickups")
if p then
for _,v in ipairs(p:GetChildren()) do
makeHighlight(v, Color3.new(1,1,0), ITM_TAG_HL)
makeBillboard(v, v.Name, Color3.new(1,1,0), ITM_TAG_BB)
end
end
end
if espGEFsOn then
local g = Workspace:FindFirstChild("GEFs")
if g then
for _,v in ipairs(g:GetChildren()) do
makeHighlight(v, Color3.new(1,0,0), GEF_TAG_HL)
makeBillboard(v, "GEF", Color3.new(1,0,0), GEF_TAG_BB)
end
end
for _,obj in ipairs(Workspace:GetChildren()) do
if obj.Name == "GEF" then
makeHighlight(obj, Color3.new(1,0,0), GEF_TAG_HL)
makeBillboard(obj, "GEF", Color3.new(1,0,0), GEF_TAG_BB)
end
end
end
task.wait(0.25)
end
end)

Players.PlayerAdded:Connect(function(plr)
if not espPlayersOn then return end
plr.CharacterAdded:Connect(function(char)
if espPlayersOn then
makeHighlight(char, Color3.new(0,1,0), PLR_TAG_HL)
makeBillboard(char, plr.Name, Color3.new(0,1,0), PLR_TAG_BB)
end
end)
end)
Players.PlayerRemoving:Connect(function(plr)
if plr.Character then
clearByTagInInstance(plr.Character, PLR_TAG_HL)
clearByTagInInstance(plr.Character, PLR_TAG_BB)
end
end)

Tab5:CreateToggle({
Name = "ESP Players",
CurrentValue = false,
Callback = function(on)
espPlayersOn = on
if not on then cleanupPlayersESP() end
end
})
Tab5:CreateToggle({
Name = "ESP Items",
CurrentValue = false,
Callback = function(on)
espItemsOn = on
if not on then cleanupItemsESP() end
end
})
Tab5:CreateToggle({
Name = "ESP GEFs",
CurrentValue = false,
Callback = function(on)
espGEFsOn = on
if not on then cleanupGEFESP() end
end
})
